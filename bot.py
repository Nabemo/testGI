import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import json
import httpx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = '–í–ê–®_TELEGRAM_BOT_TOKEN'
FRAGMENT_API_KEY = '–í–ê–®_FRAGMENT_API_KEY'
ADMIN_IDS = [–í–ê–®_TELEGRAM_ID]  # –í–∞—à ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserState(StatesGroup):
    waiting_for_payment = State()

# –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ë–î)
STAR_PRODUCTS = [
    {"id": 1, "name": "–ú–∞–ª–∞—è –∑–≤–µ–∑–¥–∞", "price": 10, "fragment_id": "star1", "emoji": "‚≠ê"},
    {"id": 2, "name": "–ó–≤–µ–∑–¥–∞-–≥–∏–≥–∞–Ω—Ç", "price": 30, "fragment_id": "star2", "emoji": "üåü"},
    {"id": 3, "name": "–ú–ª–µ—á–Ω—ã–π –ø—É—Ç—å", "price": 100, "fragment_id": "star3", "emoji": "üåå"}
]

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Fragment API
class FragmentAPI:
    def __init__(self, api_key):
        self.base_url = "https://api.fragment.com"
        self.headers = {"Authorization": f"Bearer {api_key}"}

    async def get_balance(self):
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{self.base_url}/balance", headers=self.headers)
            return response.json().get("balance", 0)

    async def create_invoice(self, fragment_id, price):
        data = {
            "item_id": fragment_id,
            "price": price,
            "currency": "USD"
        }
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{self.base_url}/invoice", json=data, headers=self.headers)
            return response.json()

fragment_api = FragmentAPI(FRAGMENT_API_KEY)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω –∑–≤—ë–∑–¥"))
    
    await message.answer(
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cosmic Stars Shop!\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∑–≤—ë–∑–¥—ã —á–µ—Ä–µ–∑ Fragment.",
        reply_markup=keyboard
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if message.from_user.id not in ADMIN_IDS:
        for admin_id in ADMIN_IDS:
            await bot.send_message(
                5029778246,
                f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                f"ID: {message.from_user.id}\n"
                f"Username: @{message.from_user.username}"
            )

# –ö–Ω–æ–ø–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞
@dp.message_handler(text="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω –∑–≤—ë–∑–¥")
async def show_shop(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = await fragment_api.get_balance()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    keyboard = types.InlineKeyboardMarkup()
    for product in STAR_PRODUCTS:
        keyboard.add(
            types.InlineKeyboardButton(
                text=f"{product['emoji']} {product['name']} - {product['price']}‚≠ê",
                callback_data=f"buy_{product['id']}"
            )
        )
    
    await message.answer(
        f"üåü <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {balance}‚≠ê\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–µ–∑–¥—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(lambda c: c.data.startswith('buy_'))
async def process_buy(callback_query: types.CallbackQuery, state: FSMContext):
    product_id = int(callback_query.data.split('_')[1])
    product = next(p for p in STAR_PRODUCTS if p["id"] == product_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ
    await state.update_data(
        product_id=product["id"],
        product_name=product["name"],
        price=product["price"]
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ Fragment
    invoice = await fragment_api.create_invoice(product["fragment_id"], product["price"])
    
    if invoice.get("status") == "success":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Fragment",
                url=invoice["payment_url"]
            )
        )
        
        await bot.send_message(
            callback_query.from_user.id,
            f"üõí –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{product['name']}</b>\n"
            f"üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{product['price']}‚≠ê</b>\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await UserState.waiting_for_payment.set()
    else:
        await bot.send_message(
            callback_query.from_user.id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ webhook)
@dp.message_handler(state=UserState.waiting_for_payment)
async def check_payment(message: types.Message, state: FSMContext):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Fragment API
    # –í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    user_data = await state.get_data()
    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É {user_data['product_name']}!\n"
        "–í–∞—à–∞ –∑–≤–µ–∑–¥–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é."
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    for admin_id in ADMIN_IDS:
        await bot.send_message(
            admin_id,
            f"–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞:\n"
            f"–¢–æ–≤–∞—Ä: {user_data['product_name']}\n"
            f"–¶–µ–Ω–∞: {user_data['price']}‚≠ê\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}"
        )
    
    await state.finish()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup(dp):
    await bot.send_message(ADMIN_IDS[0], "ü§ñ –ë–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –∑–≤—ë–∑–¥ –∑–∞–ø—É—â–µ–Ω!")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)